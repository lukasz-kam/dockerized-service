name: Deploy Docker Node.js App to EC2 with SSH
on:
  workflow_dispatch:
  push:
    paths:
      - 'node-app/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code from repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_IMAGE }} .
          docker push ${{ secrets.DOCKERHUB_IMAGE }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH Key for EC2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa

      - name: Install docker if not installed on EC2
        run: |
          SERVER_IP="${{ secrets.SERVER_IP }}"
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@$SERVER_IP << 'EOF'
            if ! command -v docker &> /dev/null
            then
              echo "Docker not found, installing..."
              sudo yum update -y
              sudo yum install -y docker
              sudo usermod -aG docker ${{ secrets.EC2_USER }}
              newgrp docker
              sudo systemctl start docker
              sudo systemctl enable docker
            else
              echo "Docker is already installed."
            fi
          EOF

      - name: SSH into server and run Docker commands
        run: |
          SERVER_IP="${{ secrets.SERVER_IP }}"
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@$SERVER_IP << 'EOF'
            docker pull ${{ secrets.DOCKERHUB_IMAGE }}

            docker stop node-example-app || true
            docker rm node-example-app || true

            docker run -d \
              --name node-example-app \
              -p 80:8080 \
              -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
              -e SECRET_MESSAGE="${{ secrets.SECRET_MESSAGE }}" \
              -e AUTH_USERNAME="${{ secrets.AUTH_USERNAME }}" \
              -e AUTH_PASSWORD="${{ secrets.AUTH_PASSWORD }}" \
              ${{ secrets.DOCKERHUB_IMAGE }}
          EOF